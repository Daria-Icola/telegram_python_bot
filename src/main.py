import os
from src import config
import telebot
from src.bot.menu.create_menu_sample import choose_category, keyboard_generator, choose_reports
from src.bot.actions.get_data_cars import get_brands_list, get_category_list, get_numbers_list, get_models_list, get_car_info, \
    add_ride, update_kms
from src.bot.actions.get_reports import register_user, update_user_data, get_user, get_employees, delete_car_by_num, get_all_numbers
from src.bot.utils.validators import km_validation
from src.bot.utils.utils import generate_log_message
from src.libs.excel import Excel

logger = config.logger
bot = telebot.TeleBot(config.telegram["token"])
choosed = {}
user_data = {}

# Constants to indicate steps while user is entering password
TEAM_USER_LOGGING = 0
TEAM_USER_ACCEPTED = 1

USER_GET_FULLNAME = 0
USER_ACCEPT_FULLNAME = 1
USER_ADD_FULLNAME = 2
user_get_fullname = {}


STATUS_ADD_KM_CURRENT = 0
STATUS_ADD_KM_END = 1
user_add_step = {}


user_step = {}
excel = Excel()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ user_step = TEAM_USERS_LOGIN
@bot.message_handler(func=lambda message: user_step.get(message.chat.id) == TEAM_USER_LOGGING)
def team_user_login(message):

    if not user_data.get(message.chat.id):
        user_data[message.chat.id] = {
            'telegram_id': message.from_user.id,
            'telegram_login': message.from_user.username,
            'first_name': message.from_user.first_name
        }

    pwd_counter = user_data.get(message.chat.id).get("password_counter")
    if pwd_counter is None:
        user_data[message.chat.id].update({'password_counter': 1})


    # –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–π, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–æ–ª—å—é –≤–æ–¥–∏—Ç–µ–ª—å
    if message.text == config.telegram["driver_password"]:
        user_data[message.chat.id].update({'role': '–í–æ–¥–∏—Ç–µ–ª—å'})
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        update_user_data(None, user_data[message.chat.id].get("role"), user_data[message.chat.id].get("telegram_id"))
        logger.info('INFO: ', user_data[message.chat.id])
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–≤–æ–¥–∏—Ç–µ–ª–µ–π
        user_step[message.chat.id] = TEAM_USER_ACCEPTED
        # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        get_fullname(message)
        return

    # –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–æ–ª—å—é –º–µ–Ω–µ–¥–∂–µ—Ä
    if message.text == config.telegram["manager_password"]:
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id].update({'role': '–ú–µ–Ω–µ–¥–∂–µ—Ä'})
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        update_user_data(user_data[message.chat.id].get(""), user_data[message.chat.id].get("role"), user_data[message.chat.id].get("telegram_id"))
        logger.info('INFO', user_data[message.chat.id])
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        user_step[message.chat.id] = TEAM_USER_ACCEPTED
        # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        get_fullname(message)
        return

    pwd_counter = user_data.get(message.chat.id).get("password_counter")
    # if message.text != config.telegram["driver_password"] or message.text != config.telegram["manager_password"]:
    #     user_data[message.chat.id] = {'password_counter': 1}

    if pwd_counter:
        if user_data.get(message.chat.id) and int(pwd_counter) < 3:
            user_data[message.chat.id]["password_counter"] += 1
            logger.info(user_data)
            bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ")
            return

        if user_data.get(message.chat.id) and pwd_counter and int(pwd_counter) == 3:
            logger.info(user_data)
            bot.send_message(message.chat.id, "–õ–∏–º–∏—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Äe–≤—ã—à–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
            return



@bot.message_handler(commands=["start"])
def start_message(message):
    logger.info(generate_log_message(message))
    user = get_user(message.from_user.id)
    if user:
        user_data[message.chat.id] = user
        if not user.get('role'):
            user_step[message.chat.id] = TEAM_USER_LOGGING
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            return
        if not user.get('fullname'):
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ: ")
            user_get_fullname[message.chat.id] = USER_ACCEPT_FULLNAME
            return
        # –µ—Å–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —Ä–æ–ª—å—é –º–µ–Ω–µ–¥–∂–µ—Ä
        if user.get('role') == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:', reply_markup=keyboard_generator(["–í–æ–¥–∏—Ç–µ–ª—å", "–ú–µ–Ω–µ–¥–∂–µ—Ä"]))
            logger.info("Open menu: choose role")
            return
        # –µ—Å–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —Ä–æ–ª—å—é –≤–æ–¥–∏—Ç–µ–ª—å
        if user.get('role') == '–í–æ–¥–∏—Ç–µ–ª—å':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard_generator(get_category_list()))
            logger.info("Open menu: choose category")
            return

        # –∏–Ω–∞—á–µ –∑–∞–ø–æ–º–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞(id, firstname, login) –∏ –∑–∞–ø—Ä–æ—Å–∏ –ø–∞—Ä–æ–ª—å
    if not user:
        user_step[message.chat.id] = TEAM_USER_LOGGING
        register_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        logger.info("Registration user: Success")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        return


@bot.message_handler(commands=["help"])
def start_message(message):
    bot.send_message(message.chat.id, """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:

‚ùóÔ∏è–í–ê–ñ–ù–û:
–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã, –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –ø–∞—Ä–æ–ª—å –∏ –≤–∞—à–µ –§–ò–û.üìù
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è

–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å. 
üìç"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úÖ
üìç"–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –§–ò–û üîô
–ë–æ—Ç –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏—Ç, –∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º,
–≤–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –º–∞—Ä–∫–∏, –º–æ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä–∞.
–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥, –≤—ã–≤–µ–¥—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üìç "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É" —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
–∏ –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–µ–≥ ‚úîÔ∏è
üìç "–û—Ç–º–µ–Ω–∞" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
–Ω–∞—á–∏–Ω–∞—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô

‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
–í —Å–ª—É—á–∞–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É üì©

–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞ 111111.
–ï—Å–ª–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è - –æ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è,
–∏–Ω–∞—á–µ, –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –≤–∞—Å –æ–± —ç—Ç–æ–º üîç

–î–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–µ–∑–¥–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞
üìç –ö–Ω–æ–ø–∫—É "–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞"
üìç /start
""")

def validation_user(message):
    # –ö–µ–π—Å—Å 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
    # –ö–µ–π—Å 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –í–æ–¥–∏—Ç–µ–ª—è —á—Ç–æ –§–ò–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.
    # –ö–µ–π—Å 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è user_data
    # –û–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —é–∑–µ—Ä–∞, –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ë–î, –∏ –µ–≥–æ —à–∞–≥–µ.
    user = get_user(message.from_user.id)
    if user and not user.get('fullname'):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ: ")
        user_get_fullname[message.chat.id] = USER_ACCEPT_FULLNAME
        return

    if user and not user.get('role'):
        return ''

def get_choosed_category(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard_generator(get_category_list()))
    logger.info('INFO: get_choosed_category', user_data[message.chat.id])
    #  return user_data[message.chat.id]


@bot.message_handler(commands=["–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"])
def new_km_message(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–±–µ–≥: ")
    user_add_step[message.chat.id] = STATUS_ADD_KM_CURRENT


@bot.message_handler(func=lambda message: user_get_fullname.get(message.chat.id) == USER_GET_FULLNAME)
def get_fullname(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ: ")
    user_get_fullname[message.chat.id] = USER_ACCEPT_FULLNAME
    bot.edit_message_text(chat_id=message.chat.id,
                          message_id=message.message_id - 1,
                          text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")
    return

@bot.message_handler(func=lambda message: user_get_fullname.get(message.chat.id) == USER_ACCEPT_FULLNAME)
def accept_fullname(message):
    bot.send_message(message.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –§–ò–û: ' + message.text, reply_markup=keyboard_generator(["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–ù–∞–∑–∞–¥"]))
    try:
        fullname = message.text
        user_data[message.chat.id].update({'fullname': fullname})
        user_get_fullname[message.chat.id] = None
    except Exception as error:
        logger.error('ERROR accept: ', error)


# @bot.message_handler(func=lambda message: user_get_fullname.get(message.chat.id) == USER_ADD_FULLNAME)
def add_fullname(message):
    try:
        update_user_data(user_data[message.chat.id].get("fullname"), user_data[message.chat.id].get("role"),
                         user_data[message.chat.id].get("telegram_id"))
    except Exception as error:
        logger.error("ERROR add fullname: ", error)


@bot.message_handler(func=lambda message: user_add_step.get(message.chat.id) == STATUS_ADD_KM_CURRENT)
def adding_kms(message): # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏
    km_end = message.text
    logger.info(km_end)
    if km_validation(km_end):
        km_current = get_car_info(user_data[message.chat.id].get('number')).get('km')

        if int(km_current) < int(km_end) or user_data[message.chat.id].get('role') == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            if not user_data[message.chat.id].get('fullname'):
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:")
                user_get_fullname[message.chat.id] = USER_ACCEPT_FULLNAME

            user_data[message.chat.id].update({'km_current': km_current})
            user_data[message.chat.id].update({'km_end': km_end})

            try:
                res = add_ride(user_data[message.chat.id].get('category'), user_data[message.chat.id].get('number'),
                               user_data[message.chat.id].get('brands'), user_data[message.chat.id].get('models'), user_data[message.chat.id].get('km_current'),
                               user_data[message.chat.id].get('km_end'), user_data[message.chat.id].get('fullname'),)

                bot.send_message(message.chat.id, '–ü—Ä–æ–±–µ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω',
                                 reply_markup=keyboard_generator(['–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞']))

                update_kms(user_data[message.chat.id].get('number'), user_data[message.chat.id].get('km_end'))
                user_add_step[message.chat.id] = STATUS_ADD_KM_END
                return res

            except Exception as error:
                logger.error(error)

                bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–≥')
                new_km_message(message)

        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–±–µ–≥ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.  –ù–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ.')
            new_km_message(message)

    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–±–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        new_km_message()




@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # validation_user(call.message)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    if call.message:
        if call.data == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç—á–µ—Ç–∞
            choosed_reports = choose_reports(call.message)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=choosed_reports["message"],
                                  reply_markup=choosed_reports["keyboard"])
            return

        if call.data == '–í–æ–¥–∏—Ç–µ–ª—å':
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ
            choosed_category = choose_category(call.message)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=choosed_category["message"],
                                  reply_markup=choosed_category["keyboard"])
            return

        if call.data in get_category_list() and user_data[call.message.chat.id]:
            user_data[call.message.chat.id].update({'category': call.data})
            brand_list = get_brands_list(call.data)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É',
                                  reply_markup=keyboard_generator(brand_list))
            return
        if call.data in get_brands_list(user_data.get(call.message.chat.id).get('category')):
            user_data[call.message.chat.id].update({'brands': call.data})
            model_list = get_models_list(user_data[call.message.chat.id]['brands'], user_data[call.message.chat.id]['category'])
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
                                  reply_markup=keyboard_generator(model_list))
            return
        if user_data.get(call.message.chat.id).get('brands') and call.data in get_models_list(user_data[call.message.chat.id]['brands'], user_data[call.message.chat.id]['category']):
            user_data[call.message.chat.id].update({'models': call.data})
            number_list = get_numbers_list(user_data[call.message.chat.id]['models'])
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
                                  reply_markup=keyboard_generator(number_list))
            return
        if user_data.get(call.message.chat.id).get('models') and call.data in get_numbers_list(user_data[call.message.chat.id]['models']):
            user_data[call.message.chat.id].update({'number': call.data})
            number_list = get_numbers_list(user_data[call.message.chat.id]['models'])
            car_info = get_car_info(user_data[call.message.chat.id].get('number'))
            message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—Ü—è –æ–± –∞–≤—Ç–æ:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {car_info.get('car_category')}\n–ú–∞—Ä–∫–∞: {car_info.get('brand')}\n–ú–æ–¥–µ–ª—å: {car_info.get('model')}\n–ù–æ–º–µ—Ä: {car_info.get('number')}\n–ü—Ä–æ–±–µ–≥: {car_info.get('km')}–∫–º"
            buttons = ["–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", "–û—Ç–º–µ–Ω–∞"]
            if user_data[call.message.chat.id].get('role') == '–ú–µ–Ω–µ–¥–∂–µ—Ä':
                buttons += ["–£–¥–∞–ª–∏—Ç—å"]
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=message,
                                  reply_markup=keyboard_generator(buttons))
            return

        if call.data == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É':
            new_km_message(call.message)
            car_info = get_car_info(user_data[call.message.chat.id].get('number'))
            info_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—Ü—è –æ–± –∞–≤—Ç–æ:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {car_info.get('car_category')}\n–ú–∞—Ä–∫–∞: {car_info.get('brand')}\n–ú–æ–¥–µ–ª—å: {car_info.get('model')}\n–ù–æ–º–µ—Ä: {car_info.get('number')}\n–ü—Ä–æ–±–µ–≥: {car_info.get('km')}–∫–º"
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=info_message)
            return

        if call.data == '–£–¥–∞–ª–∏—Ç—å':
            print(user_data[call.message.chat.id].get('number'))
            car_info = get_car_info(user_data[call.message.chat.id].get('number'))
            delete_car_by_num(user_data[call.message.chat.id].get('number'))
            all_numbers = get_all_numbers()
            if user_data[call.message.chat.id].get('number') not in all_numbers:
                info_message = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω:\n–ú–∞—Ä–∫–∞: {car_info.get('brand')}\n–ú–æ–¥–µ–ª—å: {car_info.get('model')}\n–ù–æ–º–µ—Ä: {car_info.get('number')}\n–ü—Ä–æ–±–µ–≥: {car_info.get('km')}–∫–º"
            else:
                info_message = f"–û—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n–ú–∞—Ä–∫–∞: {car_info.get('brand')}\n–ú–æ–¥–µ–ª—å: {car_info.get('model')}\n–ù–æ–º–µ—Ä: {car_info.get('number')}\n"
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=info_message)
            return

        if call.data == '–û—Ç–º–µ–Ω–∞' or call.data == '–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞':
            choosed_category = choose_category(call.message)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=choosed_category["message"],
                                  reply_markup=choosed_category["keyboard"])

        if call.data == "–ù–∞–∑–∞–¥":
            bot.delete_message(chat_id=call.message.chat.id,
                                message_id=call.message.message_id)
            get_fullname(call.message)
            user_get_fullname[call.message.chat.id] = USER_GET_FULLNAME
            return

        if call.data == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
            # TODO FULLNAME
            add_fullname(call.message)
            if user_data[call.message.chat.id].get("role") == '–í–æ–¥–∏—Ç–µ–ª—å':
                choosed_category = choose_category(call.message)
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=choosed_category["message"],
                                      reply_markup=choosed_category["keyboard"])
                return

            elif user_data[call.message.chat.id].get("role") == '–ú–µ–Ω–µ–¥–∂–µ—Ä':

                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:',
                                      reply_markup=keyboard_generator(["–í–æ–¥–∏—Ç–µ–ª—å", "–ú–µ–Ω–µ–¥–∂–µ—Ä"]))
                return

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–µ–º –∫–º –∑–∞ –Ω–µ–¥–µ–ª—é. –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Ö–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç—á–µ—Ç
        if call.data == 'final_report':
            try:
                document = excel.set_car_km()
                doc = open(document, 'rb')
                bot.send_document(call.message.chat.id, doc)
            except Exception as error:
                logger.error(f"ERROR!: {error}")
            return

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –ø–æ–µ–∑–¥–∫–∞–º–∏, —Å–æ–≤–µ—à–µ–Ω–Ω—ã–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é. –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Ö–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        if call.data == 'detailed_report':
            try:
                document = excel.create_detail_report()
                doc = open(document, 'rb')
                bot.send_document(call.message.chat.id, doc)
            except Exception as error:
                logger.error("ERROR!: ", error)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if call.data == 'get_all_users':
            try:
                all_emloyees = get_employees()
                message = '<code>'
                for employee in all_emloyees:
                    message += f'- {employee}'
                message += '</code>'
                return bot.send_message(call.message.chat.id, message, parse_mode='html')
            except Exception as error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {error}")
            return

        if call.data == 'add_new_car':
            try:
                bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")


            except Exception as error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å : {error}")





if __name__ == '__main__':
     bot.infinity_polling()
